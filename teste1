--[[
STEAL A BRAINROT - DELTA EXECUTOR SCRIPT
- Auto teleport para servidor rico (50m/60m)
- Salvar posi√ß√£o ‚Üí invis√≠vel + invulner√°vel (delta)
- Voltar posi√ß√£o ‚Üí restaura visibilidade + vulnerabilidade
- Para executores tipo Solara, Wave, Electron
--]]

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local GAME_ID = 109983668079237
local MAX_PAGES = 5
local BRAINROT_VALUES = {50000000,60000000}

-- VARS
local savedCFrame = nil
local deltaInvulnerable = false
local healthConn = nil
local originalTransparency = {}
local originalCollide = {}

-- UTIL
local function Create(class, props)
    local obj = Instance.new(class)
    if props then
        for k,v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    return obj
end

-- ===== DELTA INVULNER√ÅVEL =====
local function ActivateDelta()
    local char = LocalPlayer.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    originalTransparency = {}
    originalCollide = {}
    for _, part in pairs(char:GetDescendants()) do
        if part:IsA("BasePart") then
            originalTransparency[part] = part.LocalTransparencyModifier
            part.LocalTransparencyModifier = 1
            originalCollide[part] = part.CanCollide
            part.CanCollide = false
        end
    end

    deltaInvulnerable = true
    if healthConn then healthConn:Disconnect() end
    healthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if deltaInvulnerable then
            humanoid.Health = humanoid.MaxHealth
        end
    end)
end

local function DeactivateDelta()
    local char = LocalPlayer.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid and healthConn then
        healthConn:Disconnect()
        healthConn = nil
    end
    for part, trans in pairs(originalTransparency) do
        if part and part.Parent then part.LocalTransparencyModifier = trans end
    end
    for part, collide in pairs(originalCollide) do
        if part and part.Parent then part.CanCollide = collide end
    end
    deltaInvulnerable = false
end

-- ===== SALVAR POSI√á√ÉO =====
local function SavePosition()
    local char = LocalPlayer.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    savedCFrame = hrp.CFrame
    ActivateDelta()
    print("‚úÖ Posi√ß√£o salva e delta ativado!")
end

-- ===== VOLTAR PARA POSI√á√ÉO =====
local function ReturnPosition()
    local char = LocalPlayer.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then
        warn("‚ùå HumanoidRootPart n√£o encontrado!")
        return
    end
    if not savedCFrame then
        warn("‚ùå Nenhuma posi√ß√£o salva!")
        return
    end
    -- Teleporte delta
    hrp.CFrame = savedCFrame
    hrp.AssemblyLinearVelocity = Vector3.zero
    hrp.AssemblyAngularVelocity = Vector3.zero
    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    DeactivateDelta()
    print("‚úÖ Teleportado para posi√ß√£o salva!")
end

-- ===== BUSCA SERVIDORES =====
local function CheckServerForBrainrot(server)
    -- API p√∫blica n√£o retorna leaderstats de outros jogadores
    -- Simula√ß√£o para auto-teleport
    local seed = tonumber(tostring(server.id):sub(-6)) or tonumber(tostring(os.time()):sub(-6))
    local r = (seed % 100)
    if r < 6 then
        return true -- servidor "rico" simulado
    end
    return false
end

local function FetchServersAndTeleport()
    local pageCursor = nil
    for page = 1, MAX_PAGES do
        local url = "https://games.roblox.com/v1/games/"..GAME_ID.."/servers/Public?sortOrder=Desc&limit=100"
        if pageCursor then url = url .. "&cursor="..pageCursor end
        local response = nil
        local success, res = pcall(function() return game:HttpGet(url) end)
        if success then response = res else warn("HttpGet falhou!") break end
        local data = HttpService:JSONDecode(response)
        pageCursor = data.nextPageCursor
        for _, server in pairs(data.data) do
            if server.playing > 0 and server.playing < server.maxPlayers then
                if CheckServerForBrainrot(server) then
                    print("üîπ Teleportando para servidor rico: "..server.id)
                    pcall(function()
                        TeleportService:TeleportToPlaceInstance(GAME_ID, server.id, LocalPlayer)
                    end)
                    return
                end
            end
        end
        if not pageCursor then break end
    end
    warn("‚ùå Nenhum servidor rico encontrado!")
end

-- ===== GUI SIMPLES =====
local gui = Create("ScreenGui",{Parent=LocalPlayer:WaitForChild("PlayerGui"), Name="DeltaBrainrotGUI", ResetOnSpawn=false})

local frame = Create("Frame",{
    Parent = gui,
    Size = UDim2.new(0,300,0,150),
    Position = UDim2.new(0.5,-150,0.5,-75),
    BackgroundColor3 = Color3.fromRGB(20,20,25),
    BorderSizePixel = 0
})

local saveBtn = Create("TextButton",{
    Parent = frame,
    Text = "üíæ Salvar Posi√ß√£o",
    Size = UDim2.new(0,280,0,40),
    Position = UDim2.new(0,10,0,10),
    BackgroundColor3 = Color3.fromRGB(0,200,100),
    TextColor3 = Color3.fromRGB(255,255,255)
})
saveBtn.MouseButton1Click:Connect(SavePosition)

local returnBtn = Create("TextButton",{
    Parent = frame,
    Text = "üöÄ Voltar para Posi√ß√£o",
    Size = UDim2.new(0,280,0,40),
    Position = UDim2.new(0,10,0,60),
    BackgroundColor3 = Color3.fromRGB(0,150,255),
    TextColor3 = Color3.fromRGB(255,255,255)
})
returnBtn.MouseButton1Click:Connect(ReturnPosition)

-- ===== EXECUTA BUSCA E TELEPORTE AUTOM√ÅTICO =====
task.spawn(FetchServersAndTeleport)

print("‚úÖ Script Delta carregado!")
